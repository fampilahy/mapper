package com.banregio.next.seguros.app.service;

import java.io.UnsupportedEncodingException;
import java.rmi.RemoteException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import javax.xml.rpc.ServiceException;

import com.banregio.next.seguros.interfaces.wsdl.externalcmswsuat.ACELA_SOA_ExternalWSCMS_Entities_DataContract.GetSplitInfoRequest;
import com.banregio.next.seguros.interfaces.wsdl.externalcmswsuat.ACELA_SOA_ExternalWSCMS_Entities_DataContract.ResponseSplitInfo;
import com.banregio.next.seguros.interfaces.wsdl.externals6transactionwsuat._2004._07.ACELA_SOA_S6TransactionExternal_Entities_DataContract.ProcessTransactionRequest;
import org.apache.axis.client.Stub;
import org.apache.axis.message.SOAPHeaderElement;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.util.Base64Utils;

import com.banregio.next.seguros.interfaces.wsdl.externalcmswsuat.ACELA_SOA_ExternalWSCMS_Entities_DataContract.GetMessagesByCategoryRequest;
import com.banregio.next.seguros.interfaces.wsdl.externalcmswsuat.ACELA_SOA_ExternalWSCMS_Entities_DataContract.ResponseMessagesByCategory;
import com.banregio.next.seguros.interfaces.wsdl.externalcmswsuat.tempuri.ExternalWSCMSLocator;
import com.banregio.next.seguros.interfaces.wsdl.externalcmswsuat.tempuri.IExternalWSCMS;
import com.banregio.next.seguros.interfaces.wsdl.externals6transactionwsuat._2004._07.ACELA_SOA_S6TransactionExternal_Entities_DataContract.TransactionResponse;
import com.banregio.next.seguros.interfaces.wsdl.externals6transactionwsuat.tempuri.IS6TransactionExternal;
import com.banregio.next.seguros.interfaces.wsdl.externals6transactionwsuat.tempuri.S6TransactionExternalLocator;
import com.banregio.next.seguros.interfaces.wsdl.externalwspremium.ACELA.PremiumRequest;
import com.banregio.next.seguros.interfaces.wsdl.externalwspremium.ACELA.PremiumResponse;
import com.banregio.next.seguros.interfaces.wsdl.externalwspremium.ACELA.Product;
import com.banregio.next.seguros.interfaces.wsdl.externalwspremium.tempuri.ExternalWSPremiumLocator;
import com.banregio.next.seguros.interfaces.wsdl.externalwspremium.tempuri.IExternalWSPremium;

@Service
public class ChubbService {
    //mover a yml y encriptar//TODO

    @Value("${chubb.secret}")
    String key;

    @Value("${chubb.accessKey}")
    String accessKey;

    final static String VERSION = "1.0.0.0";
    final static String URL_PREMIUM_AMOUNT = "http://tempuri.org/IExternalWSPremium/GetPremiumAmount";
    final static String URL_EXTERNAL_WSC = "http://tempuri.org/IExternalWSCMS/GetMessagesByCategory";
    final static String IS6_EXTERNAL_STUB = "http://tempuri.org/IS6TransactionExternal/GetTransactionStatus";

    public PremiumResponse getPremiumResponse(PremiumRequest premiumRequest) throws RemoteException, ServiceException, InvalidKeyException, NoSuchAlgorithmException, UnsupportedEncodingException {
        ExternalWSPremiumLocator wsloc = new ExternalWSPremiumLocator();
        IExternalWSPremium prem = wsloc.getBasicHttpBinding_IExternalWSPremium();
        addHeaders((Stub) prem, URL_PREMIUM_AMOUNT);
        premiumRequest.setEffectiveDate(Calendar.getInstance());
        return prem.getPremiumAmount(accessKey, premiumRequest);
    }

    public ResponseSplitInfo getSplitInfo(GetSplitInfoRequest splitInfoRequest) throws RemoteException, ServiceException, InvalidKeyException, NoSuchAlgorithmException, UnsupportedEncodingException {
        ExternalWSCMSLocator wsloc = new ExternalWSCMSLocator();
        IExternalWSCMS prem = wsloc.getBasicHttpBinding_IExternalWSCMS();
        addHeaders((Stub) prem, URL_EXTERNAL_WSC);
        return prem.getSplitInfo(accessKey, splitInfoRequest);
    }

    public ResponseMessagesByCategory getMessagesByCategory(GetMessagesByCategoryRequest getMessagesByCategoryRequest) throws RemoteException, ServiceException, InvalidKeyException, NoSuchAlgorithmException, UnsupportedEncodingException {
        ExternalWSCMSLocator wsloc = new ExternalWSCMSLocator();
        IExternalWSCMS prem = wsloc.getBasicHttpBinding_IExternalWSCMS();
        addHeaders((Stub) prem, URL_EXTERNAL_WSC);
        return prem.getMessagesByCategory(accessKey, getMessagesByCategoryRequest);
    }

    public TransactionResponse processS6Transaction(ProcessTransactionRequest processTransactionRequest) throws RemoteException, ServiceException, InvalidKeyException, NoSuchAlgorithmException, UnsupportedEncodingException {
        S6TransactionExternalLocator wsloc = new S6TransactionExternalLocator();
        IS6TransactionExternal prem = wsloc.getBasicHttpBinding_IS6TransactionExternal();
        addHeaders((Stub) prem, IS6_EXTERNAL_STUB);
        return prem.processTransaction(accessKey, processTransactionRequest);
    }

    public TransactionResponse getS6TransactionStatus(String tansactionId) throws RemoteException, ServiceException, InvalidKeyException, NoSuchAlgorithmException, UnsupportedEncodingException {
        S6TransactionExternalLocator wsloc = new S6TransactionExternalLocator();
        IS6TransactionExternal prem = wsloc.getBasicHttpBinding_IS6TransactionExternal();
        addHeaders((Stub) prem, IS6_EXTERNAL_STUB);
        return prem.getTransactionStatus(accessKey, tansactionId);
    }


    public String encode(String key, String data) throws NoSuchAlgorithmException, UnsupportedEncodingException, InvalidKeyException {
        Mac sha256_HMAC = Mac.getInstance("HmacSHA1");
        SecretKeySpec secret_key = new SecretKeySpec(key.getBytes(), "HmacSHA1");
        sha256_HMAC.init(secret_key);
        return Base64Utils.encodeToString(sha256_HMAC.doFinal(data.getBytes("UTF-8")));
    }

    public void addHeader(Stub request, String name, Object value) {
        SOAPHeaderElement header = new SOAPHeaderElement("http://www.acelatinamerica.com/ACELA", name, value);
        request.setHeader(header);
    }

    public void addHeaders(Stub request, String requestURL) throws InvalidKeyException, NoSuchAlgorithmException, UnsupportedEncodingException {
        String txDate = getDateForChubb();
        String signature = encode(key, requestURL + txDate);
        addHeader((Stub) request, "AccessKey", accessKey);
        addHeader((Stub) request, "Signature", signature);
        addHeader((Stub) request, "Timestamp", txDate);
        addHeader((Stub) request, "Version", VERSION);
    }

    public String getDateForChubb() {
        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.HOUR, cal.get(Calendar.HOUR) + 1); //timestam invalido con hora actual
        return new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS", Locale.getDefault()).format(new Date(cal.getTimeInMillis()));
    }
}
